# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

env:
  nreplicas: 10
  PLUMED_APT_PACKAGES: "mpi-default-bin mpi-default-dev libfftw3-dev gsl-bin libgsl0-dev libboost-serialization-dev"
  PYTHON_VERSION: "3.10"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # setting up the python cache
  setup-python:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Setting up python
      run: pip install -r requirements.txt

  # setting up the plumed cache
  setup-plumed:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version:
          - master
          - stable
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: calculate cache key for the compilation
        id: get-key
        run: |
          if [[ ${{ matrix.version }} = master ]];then
          mastersha=$(gh api repos/plumed/plumed2/branches --paginate --jq '.[] | select( .name | match("^master$")) | .commit.sha')
          echo "key=$mastersha" >> $GITHUB_OUTPUT
          echo "branch=master" >> $GITHUB_OUTPUT
          echo "suffix=_master" >> $GITHUB_OUTPUT
          else
          # gets the list of the v2.* branches and sort it by version
          gh api repos/plumed/plumed2/branches --paginate --jq '.[] | select( .name | match("^v2.[0-9]{1,2}$")) | {name:.name, sha:.commit.sha}'  | jq -s 'sort_by ( .name | sub("v";"") | split (".") | map(tonumber))[-1]' > latest_version
          branch=$(cat latest_version | jq -r '.name')
          sha=$(cat latest_version | jq -r '.sha')
          echo "key=$sha" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "suffix=" >> $GITHUB_OUTPUT
          fi
      - uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ~/opt
          key: ccache-${{ runner.os }}-${{ matrix.version }}-${{ steps.get-key.outputs.key }}
          restore-keys: ccache-${{ runner.os }}-${{ matrix.version }}
      - name: Set paths
        run: |
            echo "$HOME/opt/bin" >> $GITHUB_PATH
            echo "CPATH=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$CPATH" >> $GITHUB_ENV
            echo "INCLUDE=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$INCLUDE" >> $GITHUB_ENV
            echo "LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LIBRARY_PATH" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
            echo "PYTHONPATH=$HOME/opt/lib/plumed/python:$PYTHONPATH" >> $GITHUB_ENV
            # needed to avoid MPI warning
            echo "OMPI_MCA_btl=^openib" >> $GITHUB_ENV
      #we need to checkout to access .ci/install.libtorch
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ${{ env.PLUMED_APT_PACKAGES }}
          sudo apt-get install ccache
          ccache -p
          ccache -s
          mkdir -p ~/.ccache/ccache
          .ci/install.libtorch
      - name: Install plumed
        uses: plumed/install-plumed@v1
        with:
          CC: "ccache mpicc"
          CXX: "ccache mpic++"
          suffix: "${{ steps.get-key.outputs.suffix }}"
          version: "${{ steps.get-key.outputs.branch }}"
          extra_options: --enable-modules=all --enable-boost_serialization --enable-fftw --enable-libtorch LDFLAGS=-Wl,-rpath,$LD_LIBRARY_PATH --disable-basic-warnings
      - name: prepare plumed tar
        run: |
          cd $HOME
          tar cf plumed-${{matrix.version}}.tar opt/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: plumed-${{matrix.version}}
          path: ~/plumed-${{matrix.version}}.tar
          retention-days: 1 

  # After compiling plumed and setting up the python cache, we can build the nest
  build:
    needs: 
      - setup-python
      - setup-plumed
    strategy:
      fail-fast: false
      matrix:
        replica: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4
    
    - uses: actions/cache@v4
      with:
        path: |
          ~/opt
          ~/.ccache
        key: ccache-${{ runner.os }}-${{ github.sha }}
        restore-keys: ccache-${{ runner.os }}-
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Download compiled plumed
      uses: actions/download-artifact@v4
      with:
        pattern: plumed-*
        #merge multiple should merge the two directories
        merge-multiple: true
        path: ~/
  
    - name: Unpacking plumed artifacts
      run: |
        cd $HOME
        tar xf ~/plumed-master.tar
        tar xf ~/plumed-stable.tar
    
    - name: Set paths
      run: |
        echo "$HOME/opt/bin" >> $GITHUB_PATH
        echo "CPATH=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$CPATH" >> $GITHUB_ENV
        echo "INCLUDE=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$INCLUDE" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$HOME/opt/lib/plumed/python:$PYTHONPATH" >> $GITHUB_ENV
        # needed to avoid MPI warning
        echo "OMPI_MCA_btl=^openib" >> $GITHUB_ENV

    - name: Install software
      run: |
        sudo apt-get update
        sudo apt-get install ${{ env.PLUMED_APT_PACKAGES }}
        pip install -r requirements.txt

    - name: Optimize parallel build
      run: |
        wget https://github.com/plumed-nest/plumed-nest.github.io/raw/master/_data/eggs.yml -P _data/
        python optimize_build.py ${{matrix.replica}} ${{env.nreplicas}} 0.0 eggs/*/*/
    - name: Run
      run: |
        python --version
        # N.B. If you adjust the number of replicas used here you need to adjust the liquid syntax in summary.md that builds the total number of lessons that use each action
        python -u nest.py --nreplicas ${{env.nreplicas}} --replica ${{matrix.replica}}
        cp $(plumed_master info --root)/json/syntax.json syntax.${{matrix.replica}}.json
        tar cf nest_files.tar $(find . -name "*.md") $(find . -name "*.stdout.txt.zip") $(find . -name "*.stderr.txt.zip") $(find . -name "*badge.svg") $(find . -name *.js) $(find . -name *.css) _data/*.yml syntax.${{matrix.replica}}.json

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: nest-content${{matrix.replica}}
        path: nest_files.tar
        retention-days: 1
  # This is the job that uploads the nest
  upload:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4
    - name: Download artifacts
      uses: actions/download-artifact@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Prepare postprocessing
      run: |
        pip install -r requirements.txt
    - name: Upload
      env:
        PLUMED_NEST_GITHUB_TOKEN: ${{ secrets.PLUMED_NEST_GITHUB_TOKEN }}
      run: |
        bash .ci/push _config.yml _layouts _data assets # _sass
        #{
        #  find . -name "*.md"
        #  find . -name "*.stdout.txt.zip"
        #  find . -name "*badge.svg"
        #  echo _config.yml _layouts _data assets # _sass
        #} | bash .ci/push
